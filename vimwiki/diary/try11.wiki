
= Try11 =

try 10, plots are fluctuating but chi_ud, chi_s are still increasing and have not reached the thermal equilibrium, plaquette however has reached thermal equilibrium (does not tends to zero but to some finite number (but it is not flucutating))

So , in this try11; I am going to generate so many configurations and hope for equilibrium point to be found. I am going to increase no_md steps in this param file.


== Parameters ==

#
# rhmc.param
#
# Parameter file for RHMC runs with HISQ.
#
#      Lattice: Nx Ny Nz Nt
#        Nodes: Number of nodes per direction
#      mass_ud: Light quark mass , these are renormalisation scheme dependent, current masses are calculated from minimal substraction scheme. lattice methods are also one way to set the cut off/ and provide the quark masses, the hadron's masses(proton mass, pion mass) are renormalisation scheme independent and so we use those to set the scale. 
#       mass_s: Strange quark mass
#        no_pf: Number of pseudo-fermion fields
#         beta: it is inverse gauge coupling (2N/g.g), it is purely function of scale(a), beta vs lattice spacing(a) is kind of like exponential decay graph.
#
#    step_size: step size of trajectory
#        no_md: number of steps of trajectory (md-molecular dynamics)
#   no_step_sf: number of steps of strange quark integration
#        no_sw: number of steps of gauge integration
#      residue: residue for inversions
#        cgMax: max cg steps for multi mass solver
#   always_acc: always accept configuration in Metropolis
#     rat_file: rational approximation input file
#
#    rand_flag: new random numbers(0)/read in random numbers(1)
#    rand_file: file name for random numbers and infos 
#         seed: myseed to start generating the random numbers.
#    load_conf: flag_load (0=identity, 1=random, 2=getconf)
#   gauge_file: prefix for the gauge configuration's file name to be generated
#      conf_nr: configuration number of first configuration
#   no_updates: number of updates , number of configurations to be accepted/rejected (or it is total number of accept-reject operations)
#  write_every: write out configuration every
#
Lattice = 24 24 24 6
Nodes   = 1 1 1 1
mass_ud = 0.0029026
mass_s  = 0.0783706
beta    = 6.285
no_pf   = 1

#step_size  = 0.07142857
##step_size  = 0.2
##no_md      = 1
#no_md      = 14
#no_step_sf = 5
##no_sw      = 1
#no_sw      = 5             # for every 5 such updates in strange quark configuration, light quark gets updated one time.
#cgMax      = 20000
#always_acc = 0
#rat_file   = ../parameter/sample_eo.rat

step_size  = 0.05
no_md      = 100
no_step_sf = 5
no_sw      = 10
residue   = 1e-12
cgMax      = 6500
always_acc = 1
rat_file   = ../parameter/sample_eo.rat


rand_flag   = 0
rand_file   = conf_1dec/randl246f21b6285m0029026m0783706a_019.
seed        = 1729
load_conf   = 0
gauge_file  = conf_1dec/l246f21b6285m0029026m0783706a_019.
conf_nr=0                 
no_updates  = 300             #total 200 accept-reject will be made
write_every = 10             # write every 11th accept-reject process




# actaully random numbers are not that random here, here we have some algorithm to calculate the random number, which will generate the same sequence of random numbers provided we start with same seed. 

# so we have to set rand_flag=2 in order to start from the last seed. 
# we shall also change the value of seed, which will result in different sequence of random numbers. 


# also we can change load_conf=2 once we have reached the thermal equilibrium. 

# ideally we shall use always_acc=1 before we reach the thermal equilibrium and use always_acc=0 after we reach the equilibrium.
# 

== Output/result ==

Since I had used always_acc=1, I can't use the configuration after the equilibrium has reached. 
<u>Observation</u>: chi_s and chi_ud both thermalise after some time. It took 8 hours just to reach 96 accept/reject/measurement steps. 

I am cancelling the GPU-job by "ps aux" and "kill PID", and will use the random number generated after thermalised measurement index. for future try-outs, l246f21b6285m0029026m0783706a_019.30 will be used and randl246f21b6285m0029026m0783706a_019.30 file for random number generation. We shall provide different seeds by giving same random file as input parameter and use "export CUDA_VISIBLE_DEVICES=gpu_id" and generate more gauge configurations utilising all nodes of gpu and find average chi_s, chi_ud and average plaquette. We can use the generated gauge configurations for calculating polyakov loops and wilson loops or other observable from application folder. 
